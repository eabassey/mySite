{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":0,"renderable":0},{"_id":"source/img/ironman-draw.png","path":"img/ironman-draw.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tf-logo-dark.png","path":"img/header_img/tf-logo-dark.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/beantech-desktop.png","path":"img/beantech-desktop.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":0,"renderable":0},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1543257981455},{"_id":"source/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1543257981455},{"_id":"themes/beantech/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1543257981497},{"_id":"themes/beantech/_config.yml","hash":"6afd65c055d9b1c70ae67323cc869f1b4aa60348","modified":1543257981497},{"_id":"source/.DS_Store","hash":"7d125d61ec6a9a6d43da805f758636a501b511de","modified":1543262419054},{"_id":"source/_posts/aspnetcore-caching.md","hash":"022ef9c30f3edabce3a08c7f604249359a36a972","modified":1543315466203},{"_id":"source/_posts/.DS_Store","hash":"209f32bc60541b253f4dce40f4a4626de16630a0","modified":1543262424127},{"_id":"source/_posts/hexo-theme-beantech.md","hash":"1cbac851ef29c873a49020cb1de3d4c7e25a86bc","modified":1543311285217},{"_id":"source/_posts/understanding-observables-and-iterables.md","hash":"bcfc42db214b9b96ed5691f2312a54764e12e99b","modified":1543311289436},{"_id":"source/about/index.md","hash":"5166ef3de976ca88f0e0e6a8e16c3e3ee14757d6","modified":1543264298752},{"_id":"source/archive/index.md","hash":"279ff19668395f5c6b26417da99d2c1f3ecd5886","modified":1543257981464},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1543257981492},{"_id":"source/tags/index.md","hash":"a8a3323804073f07656afc4df3addd4c1f2e41cc","modified":1543264339036},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1543257981497},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1543257981497},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1543257981497},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1543257981497},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1543257981497},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1543257981498},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1543257981498},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1543257981498},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1543257981498},{"_id":"themes/beantech/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1543257981498},{"_id":"themes/beantech/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1543257981501},{"_id":"themes/beantech/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1543257981501},{"_id":"themes/beantech/layout/layout.ejs","hash":"a5af5b99ac3456ab5da1a319455904b979b91601","modified":1543257981501},{"_id":"themes/beantech/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1543257981501},{"_id":"themes/beantech/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1543257981502},{"_id":"themes/beantech/layout/page.ejs","hash":"c90797e4394c5cb63c2515109480e766d04e486e","modified":1543257981501},{"_id":"themes/beantech/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1543257981501},{"_id":"themes/beantech/layout/post.ejs","hash":"2d55684fc539dc281f9e2ec0409f09ea6ca43949","modified":1543257981501},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1543257981465},{"_id":"source/_posts/understanding-observables-and-iterables/iterable4.jpeg","hash":"b6757fce538e89d001521793092dc8ca40d96ee3","modified":1542285908809},{"_id":"source/_posts/understanding-observables-and-iterables/iterable2.jpeg","hash":"b5ce93765da977784059b8623799693a437aacc8","modified":1542285781870},{"_id":"source/_posts/understanding-observables-and-iterables/iterable1.jpeg","hash":"4594fd766aebe3b53a612cc5870c63df37dcab58","modified":1542285745267},{"_id":"source/_posts/understanding-observables-and-iterables/observable1.jpeg","hash":"d136f730a013285dc5bbe596a58cccb28d77690b","modified":1542287145424},{"_id":"source/_posts/understanding-observables-and-iterables/observable2.jpeg","hash":"094816fa83c71e017a4188904055a337d318a1ce","modified":1542287186597},{"_id":"source/_posts/understanding-observables-and-iterables/observable3.jpeg","hash":"ecb65a604c368af71778c333a3a8f95506ee94d5","modified":1542287834131},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"3d55c93d08d0751ab50714dfb3bdcc1a557d2262","modified":1543263746103},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"3542d15bdf73aa59f05f566b7ecd2255e83ee370","modified":1543257981499},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"aafb744601042f0270d2e6595129ac8a73ad2608","modified":1543257981499},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1543257981499},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1543257981499},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1543257981499},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"837f01e8a20e5023b4b292d1b3141a399567da65","modified":1543257981499},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1543257981500},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1543257981500},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1543257981500},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1543257981500},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1543257981500},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"3b10bd768f6ef30a42b1703fbc9a88627f9bfdf1","modified":1543257981500},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1543257981505},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1543257981507},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1543257981506},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1543257981506},{"_id":"themes/beantech/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1543257981502},{"_id":"themes/beantech/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1543257981502},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1543257981502},{"_id":"themes/beantech/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1543257981504},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1543257981504},{"_id":"themes/beantech/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1543257981504},{"_id":"themes/beantech/source/css/toc.styl","hash":"6c9a2d5f6f981624e0c4b64323493e8614efea29","modified":1543257981505},{"_id":"themes/beantech/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1543257981504},{"_id":"themes/beantech/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1543257981505},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1543257981508},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1543257981508},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1543257981507},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1543257981510},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1543257981510},{"_id":"themes/beantech/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1543257981510},{"_id":"themes/beantech/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1543257981510},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1543257981472},{"_id":"source/img/ironman-draw.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1543257981493},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1543257981506},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1543257981503},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1543257981507},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1543257981510},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1543257981471},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1543257981496},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1543257981504},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1543257981503},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1543257981504},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1543257981495},{"_id":"source/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1543257981492},{"_id":"themes/beantech/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1543257981509},{"_id":"source/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1543257981470},{"_id":"source/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1543257981490},{"_id":"source/_posts/hexo-theme-beantech/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1543257981460},{"_id":"source/_posts/understanding-observables-and-iterables/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1543263823431},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1543257981487},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1543257981483},{"_id":"source/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1543257981478}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2018-11-26T18:46:21.455Z","updated":"2018-11-26T18:46:21.455Z","path":"404.html","title":"","comments":1,"_id":"cjozm1wve0000u7rwn50687qv","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-21T02:48:33.000Z","description":"Wish for the Best, Prepare for the Worst","header-img":"img/header_img/Iron-Man-3.jpg","_content":"\nI am part of a bigger movement with you to solving human problems by crafting sofware that many others use everyday. Hi there, friend. Let's link up.\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Wish for the Best, Prepare for the Worst\"\nheader-img: \"img/header_img/Iron-Man-3.jpg\"\n# comments: true\n---\n\nI am part of a bigger movement with you to solving human problems by crafting sofware that many others use everyday. Hi there, friend. Let's link up.\n","updated":"2018-11-26T20:31:38.752Z","path":"about/index.html","comments":1,"_id":"cjozm1wvu0002u7rw7b8mlea5","content":"<p>I am part of a bigger movement with you to solving human problems by crafting sofware that many others use everyday. Hi there, friend. Let’s link up.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I am part of a bigger movement with you to solving human problems by crafting sofware that many others use everyday. Hi there, friend. Let’s link up.</p>\n"},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T18:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2018-11-26T18:46:21.464Z","path":"archive/index.html","_id":"cjozm1wvx0004u7rw5ak25vkj","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Search through my world.","header-img":"img/header_img/tag-bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Search through my world.\"\nheader-img: \"img/header_img/tag-bg.png\"\n---\n","date":"2018-11-26T20:32:19.036Z","updated":"2018-11-26T20:32:19.036Z","path":"tags/index.html","comments":1,"_id":"cjozm1wwg000gu7rwrr3hax3s","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Caching in ASP.NET CORE","catalog":true,"date":"2017-12-27T10:22:16.000Z","subtitle":null,"header-img":null,"catagories":["C#",".NET"],"_content":"ASP.NET CORE is the new baby in Microsoft's house. This framework has come a long way and is very promising. Traditional ASP.NET is fully featured but that also comes with a lot of noise that makes it hard for Microsoft to target it as their devine framework for building microservices. The world as changed and we are all going to microservices.\n\n## The Basics\n---\nCaching is a necessity if one is building a system that scales. Fetching data from the database everytime a request is made is very inefficient and will not meet the expectations the world has on us as developers. This is partly due to the fact that everyone is using mobile devices and requests need to be lean.\n\nCaching, therefore, involves keeping a copy of data in a place that can be accessed easily and quickly than going to the database directly, mostly for reads.\n\n## InMemory Cache\n---\nDistributed caching technologies like Redis give us peace of mind but ASP.NET CORE itself comes with an `IMemoryCache interface`, which represents a cache stored in the memory of the local web server.\n\nAn in-memory cache is stored in the memory of a single server hosting an ASP.NET app. If an app is hosted by multiple servers in a web farm or cloud hosting environment, the servers may have different values in their local in-memory caches. Apps that will be hosted in server farms or on cloud hosting should use a distributed cache to avoid cache consistency problems.\n\n## Configuration\n---\nFirst step is to add nuget dependencies:\n\n```JSON\n    \"dependencies\": {\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0-rc2-final\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0-rc2-final\",\n    \"Microsoft.Extensions.Caching.Memory\": \"1.0.0-rc2-final\",\n    \"Microsoft.Extensions.Logging\": \"1.0.0-rc2-final\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc2-final\"\n  },\n```\n\nThe caching service itself is a `middleware`, so one has to add it to the service collectin in `ConfigureServices` method in StartUp.cs as so:\n\n```C#\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMemoryCache();\n    }\n```\n\nTo use the caching interface, request an instance of `IMemoryCache` in a controller or middleware constructor. Example:\n\n```C#\n    public GreetingMiddleware(RequestDelegate next,\n    IMemoryCache memoryCache,\n    ILogger<GreetingMiddleware> logger,\n    IGreetingService greetingService)\n    {\n        _next = next;\n        _memoryCache = memoryCache;\n        _greetingService = greetingService;\n        _logger = logger;\n    }\n```\n\n## Reading and Writing to the Cache\n---\nBasically, there are two methods for working with caching layer. A `Get` and a `Set`. It doesn't come as a surprise right?\n\n```C#\npublic Task Invoke(HttpContext httpContext)\n{\n    string cacheKey = \"GreetingMiddleware-Invoke\";\n    string greeting;\n\n    // try to get the cached item; null if not found\n    // greeting = _memoryCache.Get(cacheKey) as string;\n\n    // alternately, TryGet returns true if the cache entry was found\n    if(!_memoryCache.TryGetValue(cacheKey, out greeting))\n    {\n        // fetch the value from the source\n        greeting = _greetingService.Greet(\"world\");\n\n        // store in the cache\n        _memoryCache.Set(cacheKey, greeting,\n            new MemoryCacheEntryOptions()\n            .SetAbsoluteExpiration(TimeSpan.FromMinutes(1)));\n        _logger.LogInformation($\"{cacheKey} updated from source.\");\n    }\n    else\n    {\n        _logger.LogInformation($\"{cacheKey} retrieved from cache.\");\n    }\n\n    return httpContext.Response.WriteAsync(greeting);\n}\n```\n","source":"_posts/aspnetcore-caching.md","raw":"---\ntitle: \"Caching in ASP.NET CORE\"\ncatalog: true\ndate: 2017-12-27 12:22:16\nsubtitle:\nheader-img:\ntags:\n- C#\ncatagories:\n- C#\n- .NET\n\n---\nASP.NET CORE is the new baby in Microsoft's house. This framework has come a long way and is very promising. Traditional ASP.NET is fully featured but that also comes with a lot of noise that makes it hard for Microsoft to target it as their devine framework for building microservices. The world as changed and we are all going to microservices.\n\n## The Basics\n---\nCaching is a necessity if one is building a system that scales. Fetching data from the database everytime a request is made is very inefficient and will not meet the expectations the world has on us as developers. This is partly due to the fact that everyone is using mobile devices and requests need to be lean.\n\nCaching, therefore, involves keeping a copy of data in a place that can be accessed easily and quickly than going to the database directly, mostly for reads.\n\n## InMemory Cache\n---\nDistributed caching technologies like Redis give us peace of mind but ASP.NET CORE itself comes with an `IMemoryCache interface`, which represents a cache stored in the memory of the local web server.\n\nAn in-memory cache is stored in the memory of a single server hosting an ASP.NET app. If an app is hosted by multiple servers in a web farm or cloud hosting environment, the servers may have different values in their local in-memory caches. Apps that will be hosted in server farms or on cloud hosting should use a distributed cache to avoid cache consistency problems.\n\n## Configuration\n---\nFirst step is to add nuget dependencies:\n\n```JSON\n    \"dependencies\": {\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0-rc2-final\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0-rc2-final\",\n    \"Microsoft.Extensions.Caching.Memory\": \"1.0.0-rc2-final\",\n    \"Microsoft.Extensions.Logging\": \"1.0.0-rc2-final\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc2-final\"\n  },\n```\n\nThe caching service itself is a `middleware`, so one has to add it to the service collectin in `ConfigureServices` method in StartUp.cs as so:\n\n```C#\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMemoryCache();\n    }\n```\n\nTo use the caching interface, request an instance of `IMemoryCache` in a controller or middleware constructor. Example:\n\n```C#\n    public GreetingMiddleware(RequestDelegate next,\n    IMemoryCache memoryCache,\n    ILogger<GreetingMiddleware> logger,\n    IGreetingService greetingService)\n    {\n        _next = next;\n        _memoryCache = memoryCache;\n        _greetingService = greetingService;\n        _logger = logger;\n    }\n```\n\n## Reading and Writing to the Cache\n---\nBasically, there are two methods for working with caching layer. A `Get` and a `Set`. It doesn't come as a surprise right?\n\n```C#\npublic Task Invoke(HttpContext httpContext)\n{\n    string cacheKey = \"GreetingMiddleware-Invoke\";\n    string greeting;\n\n    // try to get the cached item; null if not found\n    // greeting = _memoryCache.Get(cacheKey) as string;\n\n    // alternately, TryGet returns true if the cache entry was found\n    if(!_memoryCache.TryGetValue(cacheKey, out greeting))\n    {\n        // fetch the value from the source\n        greeting = _greetingService.Greet(\"world\");\n\n        // store in the cache\n        _memoryCache.Set(cacheKey, greeting,\n            new MemoryCacheEntryOptions()\n            .SetAbsoluteExpiration(TimeSpan.FromMinutes(1)));\n        _logger.LogInformation($\"{cacheKey} updated from source.\");\n    }\n    else\n    {\n        _logger.LogInformation($\"{cacheKey} retrieved from cache.\");\n    }\n\n    return httpContext.Response.WriteAsync(greeting);\n}\n```\n","slug":"aspnetcore-caching","published":1,"updated":"2018-11-27T10:44:26.203Z","_id":"cjozm1wvr0001u7rwm4etq59g","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> CORE is the new baby in Microsoft’s house. This framework has come a long way and is very promising. Traditional <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> is fully featured but that also comes with a lot of noise that makes it hard for Microsoft to target it as their devine framework for building microservices. The world as changed and we are all going to microservices.</p>\n<h2><span id=\"the-basics\">The Basics</span></h2>\n<hr>\n<p>Caching is a necessity if one is building a system that scales. Fetching data from the database everytime a request is made is very inefficient and will not meet the expectations the world has on us as developers. This is partly due to the fact that everyone is using mobile devices and requests need to be lean.</p>\n<p>Caching, therefore, involves keeping a copy of data in a place that can be accessed easily and quickly than going to the database directly, mostly for reads.</p>\n<h2><span id=\"inmemory-cache\">InMemory Cache</span></h2>\n<hr>\n<p>Distributed caching technologies like Redis give us peace of mind but <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> CORE itself comes with an <code>IMemoryCache interface</code>, which represents a cache stored in the memory of the local web server.</p>\n<p>An in-memory cache is stored in the memory of a single server hosting an <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> app. If an app is hosted by multiple servers in a web farm or cloud hosting environment, the servers may have different values in their local in-memory caches. Apps that will be hosted in server farms or on cloud hosting should use a distributed cache to avoid cache consistency problems.</p>\n<h2><span id=\"configuration\">Configuration</span></h2>\n<hr>\n<p>First step is to add nuget dependencies:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  \"dependencies\": &#123;</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0-rc2-final\",</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0-rc2-final\",</span><br><span class=\"line\">  \"Microsoft.Extensions.Caching.Memory\": \"1.0.0-rc2-final\",</span><br><span class=\"line\">  \"Microsoft.Extensions.Logging\": \"1.0.0-rc2-final\",</span><br><span class=\"line\">  \"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc2-final\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>The caching service itself is a <code>middleware</code>, so one has to add it to the service collectin in <code>ConfigureServices</code> method in StartUp.cs as so:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddMemoryCache();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>To use the caching interface, request an instance of <code>IMemoryCache</code> in a controller or middleware constructor. Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public GreetingMiddleware(RequestDelegate next,</span><br><span class=\"line\">IMemoryCache memoryCache,</span><br><span class=\"line\">ILogger&lt;GreetingMiddleware&gt; logger,</span><br><span class=\"line\">IGreetingService greetingService)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _next = next;</span><br><span class=\"line\">    _memoryCache = memoryCache;</span><br><span class=\"line\">    _greetingService = greetingService;</span><br><span class=\"line\">    _logger = logger;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"reading-and-writing-to-the-cache\">Reading and Writing to the Cache</span></h2>\n<hr>\n<p>Basically, there are two methods for working with caching layer. A <code>Get</code> and a <code>Set</code>. It doesn’t come as a surprise right?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Task Invoke(HttpContext httpContext)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string cacheKey = &quot;GreetingMiddleware-Invoke&quot;;</span><br><span class=\"line\">    string greeting;</span><br><span class=\"line\"></span><br><span class=\"line\">    // try to get the cached item; null if not found</span><br><span class=\"line\">    // greeting = _memoryCache.Get(cacheKey) as string;</span><br><span class=\"line\"></span><br><span class=\"line\">    // alternately, TryGet returns true if the cache entry was found</span><br><span class=\"line\">    if(!_memoryCache.TryGetValue(cacheKey, out greeting))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // fetch the value from the source</span><br><span class=\"line\">        greeting = _greetingService.Greet(&quot;world&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // store in the cache</span><br><span class=\"line\">        _memoryCache.Set(cacheKey, greeting,</span><br><span class=\"line\">            new MemoryCacheEntryOptions()</span><br><span class=\"line\">            .SetAbsoluteExpiration(TimeSpan.FromMinutes(1)));</span><br><span class=\"line\">        _logger.LogInformation($&quot;&#123;cacheKey&#125; updated from source.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogInformation($&quot;&#123;cacheKey&#125; retrieved from cache.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return httpContext.Response.WriteAsync(greeting);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> CORE is the new baby in Microsoft’s house. This framework has come a long way and is very promising. Traditional <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> is fully featured but that also comes with a lot of noise that makes it hard for Microsoft to target it as their devine framework for building microservices. The world as changed and we are all going to microservices.</p>\n<h2>The Basics</h2>\n<hr>\n<p>Caching is a necessity if one is building a system that scales. Fetching data from the database everytime a request is made is very inefficient and will not meet the expectations the world has on us as developers. This is partly due to the fact that everyone is using mobile devices and requests need to be lean.</p>\n<p>Caching, therefore, involves keeping a copy of data in a place that can be accessed easily and quickly than going to the database directly, mostly for reads.</p>\n<h2>InMemory Cache</h2>\n<hr>\n<p>Distributed caching technologies like Redis give us peace of mind but <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> CORE itself comes with an <code>IMemoryCache interface</code>, which represents a cache stored in the memory of the local web server.</p>\n<p>An in-memory cache is stored in the memory of a single server hosting an <a href=\"http://ASP.NET\" target=\"_blank\" rel=\"noopener\">ASP.NET</a> app. If an app is hosted by multiple servers in a web farm or cloud hosting environment, the servers may have different values in their local in-memory caches. Apps that will be hosted in server farms or on cloud hosting should use a distributed cache to avoid cache consistency problems.</p>\n<h2>Configuration</h2>\n<hr>\n<p>First step is to add nuget dependencies:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  \"dependencies\": &#123;</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0-rc2-final\",</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0-rc2-final\",</span><br><span class=\"line\">  \"Microsoft.Extensions.Caching.Memory\": \"1.0.0-rc2-final\",</span><br><span class=\"line\">  \"Microsoft.Extensions.Logging\": \"1.0.0-rc2-final\",</span><br><span class=\"line\">  \"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc2-final\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>The caching service itself is a <code>middleware</code>, so one has to add it to the service collectin in <code>ConfigureServices</code> method in StartUp.cs as so:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddMemoryCache();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>To use the caching interface, request an instance of <code>IMemoryCache</code> in a controller or middleware constructor. Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public GreetingMiddleware(RequestDelegate next,</span><br><span class=\"line\">IMemoryCache memoryCache,</span><br><span class=\"line\">ILogger&lt;GreetingMiddleware&gt; logger,</span><br><span class=\"line\">IGreetingService greetingService)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _next = next;</span><br><span class=\"line\">    _memoryCache = memoryCache;</span><br><span class=\"line\">    _greetingService = greetingService;</span><br><span class=\"line\">    _logger = logger;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>Reading and Writing to the Cache</h2>\n<hr>\n<p>Basically, there are two methods for working with caching layer. A <code>Get</code> and a <code>Set</code>. It doesn’t come as a surprise right?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Task Invoke(HttpContext httpContext)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string cacheKey = &quot;GreetingMiddleware-Invoke&quot;;</span><br><span class=\"line\">    string greeting;</span><br><span class=\"line\"></span><br><span class=\"line\">    // try to get the cached item; null if not found</span><br><span class=\"line\">    // greeting = _memoryCache.Get(cacheKey) as string;</span><br><span class=\"line\"></span><br><span class=\"line\">    // alternately, TryGet returns true if the cache entry was found</span><br><span class=\"line\">    if(!_memoryCache.TryGetValue(cacheKey, out greeting))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // fetch the value from the source</span><br><span class=\"line\">        greeting = _greetingService.Greet(&quot;world&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // store in the cache</span><br><span class=\"line\">        _memoryCache.Set(cacheKey, greeting,</span><br><span class=\"line\">            new MemoryCacheEntryOptions()</span><br><span class=\"line\">            .SetAbsoluteExpiration(TimeSpan.FromMinutes(1)));</span><br><span class=\"line\">        _logger.LogInformation($&quot;&#123;cacheKey&#125; updated from source.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogInformation($&quot;&#123;cacheKey&#125; retrieved from cache.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return httpContext.Response.WriteAsync(greeting);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Understanding RxJS Operators(bindCallback and bindNodeCallback)","catalog":true,"date":"2018-07-18T08:51:24.000Z","subtitle":"bindCallback and bindNodeCallback explained in layman terms","header-img":"Demo.png","catagories":["Javascript"],"_content":"> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n>\n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n---\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n---\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n---\n```bash\ngit clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](home_posts_tag-true.png)\n```yml\nhome_posts_tag: false\n```\n![home_posts_tag-false](home_posts_tag-false.png)\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^\n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","source":"_posts/hexo-theme-beantech.md","raw":"---\ntitle: \"Understanding RxJS Operators(bindCallback and bindNodeCallback)\"\ncatalog: true\ndate: 2018-07-18 10:51:24\nsubtitle: \"bindCallback and bindNodeCallback explained in layman terms\"\nheader-img: \"Demo.png\"\ntags:\n- RxJS\n- Javascript\ncatagories:\n- Javascript\n---\n> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n>\n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n---\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n---\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n---\n```bash\ngit clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](home_posts_tag-true.png)\n```yml\nhome_posts_tag: false\n```\n![home_posts_tag-false](home_posts_tag-false.png)\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^\n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","slug":"hexo-theme-beantech","published":1,"updated":"2018-11-27T09:34:45.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjozm1wvv0003u7rwmtrg5ngs","content":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><span id=\"live-demo\"></span></h1>\n<hr>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1><span id=\"usage\">Usage</span></h1>\n<hr>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2><span id=\"init\">Init</span></h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2><span id=\"modify\">Modify</span></h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3><span id=\"deployment\">Deployment</span></h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"sidebar-settings\">Sidebar settings</span></h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3><span id=\"signature-setup\">Signature Setup</span></h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"go-to-top-icon-setup\">Go to top icon Setup</span></h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3><span id=\"post-tag\">Post tag</span></h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-false.png\" alt=\"home_posts_tag-false\"></p>\n<h3><span id=\"markdown-render\">Markdown render</span></h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"hexo-basics\">Hexo Basics</span></h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"have-fun-_\">Have fun ^_^</span></h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">Live Demo</a></h1>\n<hr>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1>Usage</h1>\n<hr>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2>Init</h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2>Modify</h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3>Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Sidebar settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3>Signature Setup</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Go to top icon Setup</h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3>Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-false.png\" alt=\"home_posts_tag-false\"></p>\n<h3>Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2>Hexo Basics</h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1>Have fun ^_^</h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n"},{"title":"Understanding Observables And Iterables","catalog":true,"date":"2018-08-12T00:31:26.000Z","subtitle":"Two very important data structures explained in layman terms","header-img":"Demo.png","catagories":["JavaScript","TypeScript"],"_content":" In the software world, we are so used to a lot of data structures and algorithms for handling collections of data. Arrays, Lists, Queues, Stacks, Dictionaries and more seem to be the usual suspects. But these structures have kept us in thinking, for a long time, that when you need data, you will have to go for it.\n\n Because of this we have a lot of loop constructs in almost every programming language namely ‘for’, ‘while’, ‘do while’, ‘for in’, ‘for of’ and more. We just love iterating over data because that makes sense for us most of the time.\n\n\n# Iterables\n---\nWith Iterables, it is all about pulling data. Think of when you need water and you decide to pull from a well. There is a lot of effort involved in doing that. You have to find a:\n\n1. good bucket or tool (choice of loop construct),\n2. throw the bucket into the well and fetch some water\n3. then use human effort or a lever to pull the bucket to you. Oh! and you have to do that anytime you need water.\n\nBelow is your well of data with your looping iterator (bucket).\n\n![Your well of data with your loop iterator(bucket)](iterable1.jpeg)\n\nAnd if you are pulling too much at a time, you need more hands, that is, more wait times for this synchronous operation (All hands on deck). From the picture below, I hope the lever does not break.\n\n![Lever to pull water from well](iterable2.jpeg)\n\nWorst! Sometimes the fetched data needs to be moved again to its consumer. And we may not even know how many rounds we have to go.\n\n![Go Fetch More Data](iterable4.jpeg)\n\n# Observables to the rescue!!!\n---\nWith Observable data structures, think of standing in the middle of rain. The water comes to you. There is a lot of joy in having data being pushed to you.\n\n![Joy of Observables](observable1.jpeg)\n\nAnd even better, you can place as many buckets as you want in the rain (subscribe) and go do something else. On subscribing. In the picture below, there are 7 subscriptions to rain water.\n\n![Subscriptions to rain](observable2.jpeg)\n\n\n# Using Operators:\n---\nAs the rain comes to you, you can `decide when` to take the rain water. You can wait for sometime before taking any of the water `(delay operator)`. You can filter out stuff from the water `(filter operator)`. You can also transform the water you fetched into drinkable water by processing `(map operator)`. You can drink just one glass of water and be done with the whole thing `(take operator)`. And so on.\n\n![Girl In Control](observable3.jpeg)\n\nFrom the picture above, you can see that the girl is really in control of how much rain water to take. That is what operators do. They help you to take charge of the stream.\n\n#  Caution:\n---\nObservables brings a lot of power, enabling us to build applications that react to data in ways we could only dream of. However, having a lot of subscriptions without remembering to unsubscribe to streams that are still opened can lead to some unexpected results in your application.","source":"_posts/understanding-observables-and-iterables.md","raw":"---\ntitle: \"Understanding Observables And Iterables\"\ncatalog: true\ndate: 2018-08-12 02:31:26\nsubtitle: \"Two very important data structures explained in layman terms\"\nheader-img: \"Demo.png\"\ntags:\n- Observables\n- RxJS\n- Arrays\ncatagories:\n- JavaScript\n- TypeScript\n\n---\n In the software world, we are so used to a lot of data structures and algorithms for handling collections of data. Arrays, Lists, Queues, Stacks, Dictionaries and more seem to be the usual suspects. But these structures have kept us in thinking, for a long time, that when you need data, you will have to go for it.\n\n Because of this we have a lot of loop constructs in almost every programming language namely ‘for’, ‘while’, ‘do while’, ‘for in’, ‘for of’ and more. We just love iterating over data because that makes sense for us most of the time.\n\n\n# Iterables\n---\nWith Iterables, it is all about pulling data. Think of when you need water and you decide to pull from a well. There is a lot of effort involved in doing that. You have to find a:\n\n1. good bucket or tool (choice of loop construct),\n2. throw the bucket into the well and fetch some water\n3. then use human effort or a lever to pull the bucket to you. Oh! and you have to do that anytime you need water.\n\nBelow is your well of data with your looping iterator (bucket).\n\n![Your well of data with your loop iterator(bucket)](iterable1.jpeg)\n\nAnd if you are pulling too much at a time, you need more hands, that is, more wait times for this synchronous operation (All hands on deck). From the picture below, I hope the lever does not break.\n\n![Lever to pull water from well](iterable2.jpeg)\n\nWorst! Sometimes the fetched data needs to be moved again to its consumer. And we may not even know how many rounds we have to go.\n\n![Go Fetch More Data](iterable4.jpeg)\n\n# Observables to the rescue!!!\n---\nWith Observable data structures, think of standing in the middle of rain. The water comes to you. There is a lot of joy in having data being pushed to you.\n\n![Joy of Observables](observable1.jpeg)\n\nAnd even better, you can place as many buckets as you want in the rain (subscribe) and go do something else. On subscribing. In the picture below, there are 7 subscriptions to rain water.\n\n![Subscriptions to rain](observable2.jpeg)\n\n\n# Using Operators:\n---\nAs the rain comes to you, you can `decide when` to take the rain water. You can wait for sometime before taking any of the water `(delay operator)`. You can filter out stuff from the water `(filter operator)`. You can also transform the water you fetched into drinkable water by processing `(map operator)`. You can drink just one glass of water and be done with the whole thing `(take operator)`. And so on.\n\n![Girl In Control](observable3.jpeg)\n\nFrom the picture above, you can see that the girl is really in control of how much rain water to take. That is what operators do. They help you to take charge of the stream.\n\n#  Caution:\n---\nObservables brings a lot of power, enabling us to build applications that react to data in ways we could only dream of. However, having a lot of subscriptions without remembering to unsubscribe to streams that are still opened can lead to some unexpected results in your application.","slug":"understanding-observables-and-iterables","published":1,"updated":"2018-11-27T09:34:49.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjozm1wvy0005u7rwiswo2nbs","content":"<p>In the software world, we are so used to a lot of data structures and algorithms for handling collections of data. Arrays, Lists, Queues, Stacks, Dictionaries and more seem to be the usual suspects. But these structures have kept us in thinking, for a long time, that when you need data, you will have to go for it.</p>\n<p>Because of this we have a lot of loop constructs in almost every programming language namely ‘for’, ‘while’, ‘do while’, ‘for in’, ‘for of’ and more. We just love iterating over data because that makes sense for us most of the time.</p>\n<h1><span id=\"iterables\">Iterables</span></h1>\n<hr>\n<p>With Iterables, it is all about pulling data. Think of when you need water and you decide to pull from a well. There is a lot of effort involved in doing that. You have to find a:</p>\n<ol>\n<li>good bucket or tool (choice of loop construct),</li>\n<li>throw the bucket into the well and fetch some water</li>\n<li>then use human effort or a lever to pull the bucket to you. Oh! and you have to do that anytime you need water.</li>\n</ol>\n<p>Below is your well of data with your looping iterator (bucket).</p>\n<p><img src=\"iterable1.jpeg\" alt=\"Your well of data with your loop iterator(bucket)\"></p>\n<p>And if you are pulling too much at a time, you need more hands, that is, more wait times for this synchronous operation (All hands on deck). From the picture below, I hope the lever does not break.</p>\n<p><img src=\"iterable2.jpeg\" alt=\"Lever to pull water from well\"></p>\n<p>Worst! Sometimes the fetched data needs to be moved again to its consumer. And we may not even know how many rounds we have to go.</p>\n<p><img src=\"iterable4.jpeg\" alt=\"Go Fetch More Data\"></p>\n<h1><span id=\"observables-to-the-rescue\">Observables to the rescue!!!</span></h1>\n<hr>\n<p>With Observable data structures, think of standing in the middle of rain. The water comes to you. There is a lot of joy in having data being pushed to you.</p>\n<p><img src=\"observable1.jpeg\" alt=\"Joy of Observables\"></p>\n<p>And even better, you can place as many buckets as you want in the rain (subscribe) and go do something else. On subscribing. In the picture below, there are 7 subscriptions to rain water.</p>\n<p><img src=\"observable2.jpeg\" alt=\"Subscriptions to rain\"></p>\n<h1><span id=\"using-operators\">Using Operators:</span></h1>\n<hr>\n<p>As the rain comes to you, you can <code>decide when</code> to take the rain water. You can wait for sometime before taking any of the water <code>(delay operator)</code>. You can filter out stuff from the water <code>(filter operator)</code>. You can also transform the water you fetched into drinkable water by processing <code>(map operator)</code>. You can drink just one glass of water and be done with the whole thing <code>(take operator)</code>. And so on.</p>\n<p><img src=\"observable3.jpeg\" alt=\"Girl In Control\"></p>\n<p>From the picture above, you can see that the girl is really in control of how much rain water to take. That is what operators do. They help you to take charge of the stream.</p>\n<h1><span id=\"caution\">Caution:</span></h1>\n<hr>\n<p>Observables brings a lot of power, enabling us to build applications that react to data in ways we could only dream of. However, having a lot of subscriptions without remembering to unsubscribe to streams that are still opened can lead to some unexpected results in your application.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In the software world, we are so used to a lot of data structures and algorithms for handling collections of data. Arrays, Lists, Queues, Stacks, Dictionaries and more seem to be the usual suspects. But these structures have kept us in thinking, for a long time, that when you need data, you will have to go for it.</p>\n<p>Because of this we have a lot of loop constructs in almost every programming language namely ‘for’, ‘while’, ‘do while’, ‘for in’, ‘for of’ and more. We just love iterating over data because that makes sense for us most of the time.</p>\n<h1>Iterables</h1>\n<hr>\n<p>With Iterables, it is all about pulling data. Think of when you need water and you decide to pull from a well. There is a lot of effort involved in doing that. You have to find a:</p>\n<ol>\n<li>good bucket or tool (choice of loop construct),</li>\n<li>throw the bucket into the well and fetch some water</li>\n<li>then use human effort or a lever to pull the bucket to you. Oh! and you have to do that anytime you need water.</li>\n</ol>\n<p>Below is your well of data with your looping iterator (bucket).</p>\n<p><img src=\"iterable1.jpeg\" alt=\"Your well of data with your loop iterator(bucket)\"></p>\n<p>And if you are pulling too much at a time, you need more hands, that is, more wait times for this synchronous operation (All hands on deck). From the picture below, I hope the lever does not break.</p>\n<p><img src=\"iterable2.jpeg\" alt=\"Lever to pull water from well\"></p>\n<p>Worst! Sometimes the fetched data needs to be moved again to its consumer. And we may not even know how many rounds we have to go.</p>\n<p><img src=\"iterable4.jpeg\" alt=\"Go Fetch More Data\"></p>\n<h1>Observables to the rescue!!!</h1>\n<hr>\n<p>With Observable data structures, think of standing in the middle of rain. The water comes to you. There is a lot of joy in having data being pushed to you.</p>\n<p><img src=\"observable1.jpeg\" alt=\"Joy of Observables\"></p>\n<p>And even better, you can place as many buckets as you want in the rain (subscribe) and go do something else. On subscribing. In the picture below, there are 7 subscriptions to rain water.</p>\n<p><img src=\"observable2.jpeg\" alt=\"Subscriptions to rain\"></p>\n<h1>Using Operators:</h1>\n<hr>\n<p>As the rain comes to you, you can <code>decide when</code> to take the rain water. You can wait for sometime before taking any of the water <code>(delay operator)</code>. You can filter out stuff from the water <code>(filter operator)</code>. You can also transform the water you fetched into drinkable water by processing <code>(map operator)</code>. You can drink just one glass of water and be done with the whole thing <code>(take operator)</code>. And so on.</p>\n<p><img src=\"observable3.jpeg\" alt=\"Girl In Control\"></p>\n<p>From the picture above, you can see that the girl is really in control of how much rain water to take. That is what operators do. They help you to take charge of the stream.</p>\n<h1>Caution:</h1>\n<hr>\n<p>Observables brings a lot of power, enabling us to build applications that react to data in ways we could only dream of. However, having a lot of subscriptions without remembering to unsubscribe to streams that are still opened can lead to some unexpected results in your application.</p>\n"}],"PostAsset":[{"_id":"source/_posts/hexo-theme-beantech/Demo.png","slug":"Demo.png","post":"cjozm1wvv0003u7rwmtrg5ngs","modified":0,"renderable":0},{"_id":"source/_posts/understanding-observables-and-iterables/Demo.png","slug":"Demo.png","post":"cjozm1wvy0005u7rwiswo2nbs","modified":0,"renderable":0},{"_id":"source/_posts/understanding-observables-and-iterables/iterable1.jpeg","slug":"iterable1.jpeg","post":"cjozm1wvy0005u7rwiswo2nbs","modified":0,"renderable":0},{"_id":"source/_posts/understanding-observables-and-iterables/iterable2.jpeg","slug":"iterable2.jpeg","post":"cjozm1wvy0005u7rwiswo2nbs","modified":0,"renderable":0},{"_id":"source/_posts/understanding-observables-and-iterables/iterable4.jpeg","slug":"iterable4.jpeg","post":"cjozm1wvy0005u7rwiswo2nbs","modified":0,"renderable":0},{"_id":"source/_posts/understanding-observables-and-iterables/observable1.jpeg","slug":"observable1.jpeg","post":"cjozm1wvy0005u7rwiswo2nbs","modified":0,"renderable":0},{"_id":"source/_posts/understanding-observables-and-iterables/observable2.jpeg","slug":"observable2.jpeg","post":"cjozm1wvy0005u7rwiswo2nbs","modified":0,"renderable":0},{"_id":"source/_posts/understanding-observables-and-iterables/observable3.jpeg","slug":"observable3.jpeg","post":"cjozm1wvy0005u7rwiswo2nbs","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjozm1wvv0003u7rwmtrg5ngs","tag_id":"cjozm1wvz0006u7rwmlkepl1g","_id":"cjozm1ww30009u7rwx9ngs4hh"},{"post_id":"cjozm1wvv0003u7rwmtrg5ngs","tag_id":"cjozm1ww20007u7rwrcgsr9u9","_id":"cjozm1ww3000au7rwav6y8nmi"},{"post_id":"cjozm1wvy0005u7rwiswo2nbs","tag_id":"cjozm1ww20008u7rwqgyl6n9b","_id":"cjozm1ww5000du7rwwcffgshs"},{"post_id":"cjozm1wvy0005u7rwiswo2nbs","tag_id":"cjozm1wvz0006u7rwmlkepl1g","_id":"cjozm1ww5000eu7rw0qaabhvi"},{"post_id":"cjozm1wvy0005u7rwiswo2nbs","tag_id":"cjozm1ww4000cu7rw8cx3kgrv","_id":"cjozm1ww5000fu7rwyq4deda9"},{"post_id":"cjozm1wvr0001u7rwm4etq59g","tag_id":"cjozm4m28000nu7rwt1sf9ej4","_id":"cjozm4m28000ou7rwepnshpuu"}],"Tag":[{"name":"RxJS","_id":"cjozm1wvz0006u7rwmlkepl1g"},{"name":"Javascript","_id":"cjozm1ww20007u7rwrcgsr9u9"},{"name":"Observables","_id":"cjozm1ww20008u7rwqgyl6n9b"},{"name":"Arrays","_id":"cjozm1ww4000cu7rw8cx3kgrv"},{"name":"ASPNET","_id":"cjozm4hg4000hu7rwhci9knzm"},{"name":"ASPNET CORE","_id":"cjozm4jcy000ju7rwriy4ivwd"},{"name":"C","_id":"cjozm4l9f000lu7rwpskyx2jn"},{"name":"C#","_id":"cjozm4m28000nu7rwt1sf9ej4"},{"name":"ASPNETCORE","_id":"cjozm5yyd000pu7rwtjhkittc"}]}}